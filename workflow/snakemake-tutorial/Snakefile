configfile: "config.yaml"

def get_bwa_map_input_fastqs(wildcards):
    return config["samples"][wildcards.sample]

ruleorder: plot > calling > index > sort > map

rule all:
    input:
        "plots/quals.svg"

rule map:
    resources:
        mem_mb=16384,
        _cores=4,
    conda:
        "envs/all.yaml"
    input:
        "data/genome.fa",
        "data/samples/{sample}.fastq"
    output:
        temp("mapped_reads/{sample}.bam")
    threads: 8
    params:
        rg=r"@RG\tID:{sample}\tSM:{sample}"
    log:
        "logs/map/{sample}.log"
    shell:
        "(bwa mem -R '{params.rg}' -t {threads} {input} | "
        "samtools view -Sb - > {output}) 2> {log}"

rule sort:
    resources:
        mem_mb=16384,
        _cores=4,
    conda:
        "envs/all.yaml"
    input:
        rules.map.output
    output:
        "sorted_reads/{sample}.bam"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-O bam {input} > {output}"

rule index:
    resources:
        mem_mb=16384,
        _cores=4,
    conda:
        "envs/all.yaml"
    input:
        rules.sort.output
    output:
        "sorted_reads/{sample}.bam.bai"
    conda:
        "envs/all.yaml"
    shell:
        "samtools index {input}"

rule calling:
    resources:
        mem_mb=16384,
        _cores=4,
    conda:
        "envs/all.yaml"
    input:
        fa="data/genome.fa",
        bam=expand("sorted_reads/{sample}.bam", sample=config['samples']),
        bai=expand("sorted_reads/{sample}.bam.bai", sample=config['samples'])
    output:
        "calls/all.vcf"
    params:
        rate=config["rate"]
    log:
        "logs/calling/all.log"
    shell:
        "(samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -P '{params.rate}' -mv - > {output}) 2> {log}"

rule plot:
    resources:
        mem_mb=16384,
        _cores=4,
    conda:
        "envs/all.yaml"
    input:
        "calls/all.vcf"
    output:
        "plots/quals.svg"
    script:
        "scripts/plot-quals.py"
